Development version
===================
- redirect() and redirect_to() now accept a keyword argument 'abort' to raise
  an exception to do the redirect.

- Added BaseRoute, an interface for custom routes.

- Nested routes are now possible. As an example, `extras/routes.py` has some
  classes that prefix all nested routes with a given path, name or handler.
  This is based on an idea from `werkzeug.routing`.

- Added argument `redirect_to` to Route: if set, the route is used to redirect
  to a URL. The value can be a URL string or a callable that returns a URL.
  These two are equivalent::

    route = Route('/foo', RedirectHandler, defaults={'url': '/bar'})
    route = Route('/foo', redirect_to='/bar')

- Added argument `strict_slash` to Route: if True, redirects access to the same
  URL with different trailing slash to the strict path defined in the rule.
  For example, take these rules::

      route = Route('/foo', FooHandler, strict_slash=True)
      route = Route('/bar/', BarHandler, strict_slash=True)

  Because **strict_slash** is True, this is what will happen:

  - Access to ``/foo`` will execute ``FooHandler`` normally.
  - Access to ``/bar/`` will execute ``BarHandler`` normally.
  - Access to ``/foo/`` will redirect to ``/foo``.
  - Access to ``/bar`` will redirect to ``/bar/``.


Version 0.3 - August 05, 2010
=============================
- Routes store the handler, as we had in 0.1. This allows custom routes to
  have nested routes.
- Much improved URL building, now delegated to routes.
- added urlunsplit() helper.


Version 0.2 - August 04, 2010
=============================
- Fixed a bug in Route.match() that would make it return positional arguments
  with wrong order. Dictionary is correctly sorted now.
- Added build_only option for routes: routes that are only used for url_for()
  and never match.


Version 0.1 - August 03, 2010
=============================
- Initial release.
